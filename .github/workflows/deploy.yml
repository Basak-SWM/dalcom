name: CICD

on:
  push:
    branches: [ staging, production ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: dalcom


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.3

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.4
        with:
          java-version: '17'

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Set Image Name
        id: set-image-name
        run: |
          echo "full_image_name=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-${{ steps.extract_branch.outputs.branch }}"  >> $GITHUB_OUTPUT
          echo "image_name=${{ env.ECR_REPOSITORY }}-${{ steps.extract_branch.outputs.branch }}"  >> $GITHUB_OUTPUT

      - name: Create application.yml
        run: |
          cd ./src/main/resources
          if [ "${{ steps.extract_branch.outputs.branch }}" == "staging" ]; then
            touch ./application-staging.yml
            echo "${{ secrets.APPLICATION_SETTING_STAGING }}" > ./application-staging.yml
          elif [ "${{ steps.extract_branch.outputs.branch }}" == "production" ]; then
            touch ./application-production.yml
            echo "${{ secrets.APPLICATION_SETTING_PRODUCTION }}" > ./application-production.yml
          fi
        shell: bash

      - name: Gradle Setup
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-version: 8.1.1

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ steps.extract_branch.outputs.branch }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: gradle build -x test

      - name: Configure AWS Credentials (staging)
        if: contains(github.ref, 'staging')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS Credentials (production)
        if: contains(github.ref, 'production')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push server-deploy image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          DATE=$(date "+%y.%m.%d")
          docker build -t ${{ steps.set-image-name.outputs.full_image_name }}:$DATE --build-arg PROFILE=${{ steps.extract_branch.outputs.branch }} ./
          docker build -t ${{ steps.set-image-name.outputs.full_image_name }}:latest --build-arg PROFILE=${{ steps.extract_branch.outputs.branch }} ./

          docker push ${{ steps.set-image-name.outputs.full_image_name }}:$DATE
          docker push ${{ steps.set-image-name.outputs.full_image_name }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Set Image Name
        id: set-image-name
        run: |
          echo "full_image_name=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-${{ steps.extract_branch.outputs.branch }}"  >> $GITHUB_OUTPUT
          echo "image_name=${{ env.ECR_REPOSITORY }}-${{ steps.extract_branch.outputs.branch }}"  >> $GITHUB_OUTPUT

      - name: Set host
        id: set-aws
        run: |
          if [ "${{ steps.extract_branch.outputs.branch }}" == "staging" ]; then
            echo "host=${{ secrets.AWS_HOST_DEPLOY_STAGING }}"  >> $GITHUB_OUTPUT
            echo "ssh_key=${SSH_KEY}"  >> $GITHUB_OUTPUT
            echo "username=${{ secrets.AWS_SSH_USERNAME_STAGING }}"  >> $GITHUB_OUTPUT
          elif [ "${{ steps.extract_branch.outputs.branch }}" == "production" ]; then
            echo "host=${{ secrets.AWS_HOST_DEPLOY_PRODUCTION }}"  >> $GITHUB_OUTPUT
            echo "ssh_key=${SSH_KEY}"  >> $GITHUB_OUTPUT
            echo "username=${{ secrets.AWS_SSH_USERNAME_PRODUCTION }}"  >> $GITHUB_OUTPUT
          fi
        shell: bash

      #      - name: Deploy on server (staging)
      #        uses: appleboy/ssh-action@v0.1.10
      #        if: contains(github.ref, 'staging')
      #        with:
      #          host: ${{ steps.set-aws.outputs.host }}
      #          username: ${{ steps.set-aws.outputs.username }}
      #          key: ${{ steps.set-aws.outputs.ssh_key }}
      #          script_stop: true
      #          script: |
      #            password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
      #            docker login --username AWS --password $password ${{ env.ECR_REGISTRY }}
      #            docker pull ${{ steps.set-image-name.outputs.full_image_name }}:latest
      #            docker container stop ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
      #            docker container rm ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
      #            docker run --net=host --restart on-failure:10 -d -p 8080:8080 --name ${{ steps.set-image-name.outputs.image_name }} ${{ steps.set-image-name.outputs.full_image_name }}:latest
      #            docker images | awk '$1 == "${{ steps.set-image-name.outputs.full_image_name }}" && $2 == "<none>" {print $3}' | xargs -I {} docker rmi {}

      - name: Deploy on server (staging)
        uses: appleboy/ssh-action@v0.1.10
        if: contains(github.ref, 'staging')
        with:
          host: ${{ steps.set-aws.outputs.host }}
          username: ${{ steps.set-aws.outputs.username }}
          key: ${{ secrets.AWS_SSH_KEY_STAGING }}
          script_stop: true
          script: |
            password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
            docker login --username AWS --password $password ${{ env.ECR_REGISTRY }}
            docker pull ${{ steps.set-image-name.outputs.full_image_name }}:latest
            docker container stop ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
            docker container rm ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
            docker run --net=host --restart on-failure:10 -d -p 8080:8080 --name ${{ steps.set-image-name.outputs.image_name }} ${{ steps.set-image-name.outputs.full_image_name }}:latest
            docker images | awk '$1 == "${{ steps.set-image-name.outputs.full_image_name }}" && $2 == "<none>" {print $3}' | xargs -I {} docker rmi {}

      - name: Deploy on server (production)
        uses: appleboy/ssh-action@v0.1.10
        if: contains(github.ref, 'production')
        with:
          host: ${{ steps.set-aws.outputs.host }}
          username: ${{ steps.set-aws.outputs.username }}
          key: ${{ secrets.AWS_SSH_KEY_PRODUCTION }}
          script_stop: true
          script: |
            password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
            docker login --username AWS --password $password ${{ env.ECR_REGISTRY }}
            docker pull ${{ steps.set-image-name.outputs.full_image_name }}:latest
            docker container stop ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
            docker container rm ${{ steps.set-image-name.outputs.image_name }} 2>/dev/null || true
            docker run --net=host --restart on-failure:10 -d -p 8080:8080 --name ${{ steps.set-image-name.outputs.image_name }} ${{ steps.set-image-name.outputs.full_image_name }}:latest
            docker images | awk '$1 == "${{ steps.set-image-name.outputs.full_image_name }}" && $2 == "<none>" {print $3}' | xargs -I {} docker rmi {}
